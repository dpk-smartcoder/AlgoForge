# This is a shell command, not a used variable. Commented out for safety.
venv="conda activate /Users/lavishlaller/Desktop/Project/agent-venv"

# --- API Keys and Models ---
key1=AIzaSyBddjFqLUEVR2S3wPpgbmGMs70w0ayuCTU
key2=AIzaSyAwgX001GqJdgn5XkG2Z5B6iFJldydUHoA
key3=AIzaSyDtkMT-7qJsl9iO3ys5rY4VacTOzLKVt_M
key4=AIzaSyDtkMT-7qJsl9iO3ys5rY4VacTOzLKVt_M

key5=AIzaSyDRUosrGjT9kv2MP8kmlamkFPeRy6Ao3_8
key6=AIzaSyB04TMo9sdboR3a7H6QAK_cyGZTonSKmjM
key7=AIzaSyDfysUaCe6dqrlx_Po7A1xpPT1vQrsQtGA
key8=AIzaSyBOIaSVJmtLHoWxvnFwz_dcS42KfXuAmM8
extraction_key=AIzaSyDfysUaCe6dqrlx_Po7A1xpPT1vQrsQtGA
# Double check that this is the correct model name
model1=gemini-2.0-flash
model2=gemini-2.0-flash
model3=gemini-2.0-flash
model4=gemini-2.0-flash
extraction_model=gemini-2.0-flash
lang=java

# --- Prompts (Correctly Quoted) ---
Start_prompt="Hey Assistant — you are an expert in Data Structures & Algorithms with deep experience solving competitive programming problems.\nSupported topics include: [Array, String, Hash Table, Dynamic Programming, Math, Sorting, Greedy, DFS, Binary Search, Database, Matrix, Tree, BFS, Bit Manipulation, Two Pointers, Prefix Sum, Heap, Simulation, Binary Tree, Graph, Stack, Counting, Sliding Window, Design, Backtracking, Union Find, Linked List, Number Theory, Ordered Set, Monotonic Stack, Segment Tree, Trie, Combinatorics, Bitmask, Queue, Divide and Conquer, Recursion, Geometry, BIT, Memoization, Hash Function, BST, Shortest Path, String Matching, Topological Sort, Rolling Hash, Game Theory, Data Stream, Monotonic Queue, Brainteaser, etc.]\n\n1. Your duty: provide a correct, optimal, and precise solution for the DSA problem that will follow.\n\n2. IMPORTANT:\n- You must ONLY return your final answer in the following JSON format (use this exact JSON escape all newlines and quotes inside the code string):\n{\n    \"language\": \"{language}\",          // allowed values: java, python, cpp etc.\n    \"approach\": \"<short explanation of the algorithm and why it is correct>\",\n    \"summary\": \"<short summary of what the code does>\",\n    \"complexity\": \"<time and space complexity, e.g., O(n log n), O(n) space>\",\n    \"code\": \"<full code here as a single string with \\n for new lines>\"\n}\n- Do NOT include any explanation, commentary, or text outside this JSON.\n- Ensure the code is complete and executable as-is in the specified language.\n- The \"code\" field must contain properly escaped newlines (\\n) and quotes (\\n) where needed.\n\n3. INPUT / OUTPUT:\n- If the problem uses stdin/stdout, ensure the code reads from stdin and prints to stdout exactly as the problem expects.\n- If the problem expects a function signature, provide a complete class or function as required by the language online judge convention.\n- If ambiguous, prefer standalone, executable code (e.g., a `main` function that parses input and prints output).\n\n4. TESTS & CONSTRAINTS:\n- Use provided test cases to infer edge cases and confirm the approach handles them.\n- Respect stated constraints (n ranges, value ranges). If an optimization is required, explain it briefly in \"approach\".\n\n5. VERIFICATION:\n- Before returning, mentally (or via short reasoning) check the solution against the provided test cases and key edge cases (empty input, minimal/maximal inputs, repeated elements, etc.).\n\n6. LLM IN THE LOOP:\n- If you cannot solve the problem immediately, do NOT rush. Carefully re-read the entire statement — every word or line may change the solution.\n- Restate the problem in your own words, list assumptions, and note constraints.\n- Identify edge cases (empty input, minimal/maximal values, duplicates, etc.) and how the algorithm must handle them.\n- Sketch a high-level approach and short pseudocode before writing full code.\n- Only produce the final solution once you are confident the approach covers all constraints and edge cases.\n\nReturn the JSON exactly as specified above."

Question_prompt="6.Here is the problem statement of which you have to get me the optimal , accurate and correct solution :"
Constraint_prompt="7.Here are the constraints of the provided problem :"
TestCase_prompt="8.Here are the test cases of the problem with explaination:"
Last_prompt="9.Take your time in getting the insights and approach from the problem statement.Focus on each word,each line beacuse every word or line matters even a small word also.It can change perspective of getting correct solution.Use the provided test cases to get more idea about the problem and approach.\n10.Because it is the crucial part.It must be correct and following all the condition according to the problem statement and the constraints provided above.\n\nReturn the code of the solution after checking is it pasing the provided test case in the JSON format described above in the prompt."

# ---------> Extractor Agent Prompt <----------- #

extract_prompt="You are a highly precise, automated data processing engine. Your ONLY function is to populate a predefined JSON schema with information extracted from the provided source materials (text and/or images). test_case: Concept: Concrete examples that demonstrate the required input and the corresponding correct output.Where to find it: Look for sections labeled Examples, Sample Input/Output,Sample Cases, or Test Cases. Each example should be structured as an object containing input and output.If missing: Use an empty array [].for contraints you can find similar words Look for a section explicitly labeled Constraints, Limits, or Bounds.You must operate with 100% accuracy and strict adherence to the rules.\n\nYour output MUST be a single JSON object that strictly conforms to the structure below. There are NO exceptions.\n\n```json\n{\n    \"problem\": {\n        \"title\": \"<problem title, if available>\",\n        \"statement\": \"<full problem statement, combining text from all sources>\",\n        \"constraint\": [\n            \"<constraint 1>\",\n            \"<constraint 2>\",\n            \"...\"\n        ],\n        \"test_case\": [\n            {\n                \"input\": { ... },\n                \"output\": ...\n            },\n            \"...\"\n        ]\n    }\n}\n```\n\n**Strict Adherence Rules:**\n\n1.  **Schema Lock:** UNDER NO CIRCUMSTANCES should you add, rename, or remove any keys from the JSON schema provided above. Your task is to populate the template, not change it.\n2.  **No Inventions:** Populate fields ONLY with information directly and explicitly present in the source material. If information for a specific field (like \"title\") is not found in the source, you MUST use a `null` value for that field. Do not omit the key.\n3.  **Data Fidelity:** All text, numbers, and symbols must be extracted verbatim. Do not summarize, rephrase, interpret, or correct any information from the source.\n4.  **Output Purity:** Your entire response must be ONLY the valid JSON object. Do not include any surrounding text, markdown formatting, comments, or explanations."

verify_prompt="You are a precise, automated verification engine. Your core function is to perform a strict, field-by-field comparison between the `extracted_data` and the original `source_text` and `source_images`. Adhere to these rules:\n\n1.  **Correctness:** Every value in `extracted_data` must exactly match the corresponding value in the source material. There is no room for interpretation.\n2.  **Completeness:** All relevant data visible in the source material must be present in the `extracted_data`.\n3.  **Relevance:** No data should be present in `extracted_data` if it cannot be found in the source material.\n\nBased on your analysis, respond ONLY with a single JSON object in the following format. Do not include any other text or explanation.\n\nIF VERIFICATION PASSES:\n{\n  \"verified\": true,\n  \"reasoning\": \"Verification successful. All fields match the source material perfectly.\",\n  \"discrepancies\": []\n}\n\nIF VERIFICATION FAILS:\n{\n  \"verified\": false,\n  \"reasoning\": \"Verification failed due to one or more discrepancies.\",\n  \"discrepancies\": [\n    {\n      \"field\": \"<The JSON key with the error>\",\n      \"error_type\": \"<'MISMATCH', 'MISSING_FIELD', or 'EXTRA_FIELD'>\",\n      \"expected\": \"<The correct value from the source, or 'N/A'>\",\n      \"actual\": \"<The incorrect value from the extracted data, or 'N/A'>\"\n    }\n  ]\n}"